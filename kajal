@app.middleware("http")
async def jwt_middleware(request: Request, call_next):
    # Allow access to specific endpoints without token
    exempt_routes = ["/saml/consume", "/login"]  # Add more routes as necessary
    if request.url.path not in exempt_routes:
        token = request.headers.get("Authorization")
        if not token:
            return RedirectResponse(url="/login")  # Redirect to login if no token
 
        token = token.replace("Bearer ", "")
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            request.state.user = payload  # Store user info in request state
        except jwt.ExpiredSignatureError:
            return RedirectResponse(url="/login")  # Redirect to login if token expired
        except jwt.PyJWTError:
            return RedirectResponse(url="/login")  # Redirect to login for invalid token
 
    response = await call_next(request)
    return response
