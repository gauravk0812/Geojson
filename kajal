# repositories/staff_repository.py

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import update
from models import StaffMaster  # Import your ORM model

class StaffRepository:
    def __init__(self, db: AsyncSession):
        self.db = db

    async def soft_delete_staff(self, uuid: str, last_date: str):
        stmt = (
            update(StaffMaster)
            .where(StaffMaster.uuid == uuid)
            .values(is_active=False, is_deleted=True, last_date=last_date)
            .execution_options(synchronize_session="fetch")
        )
        await self.db.execute(stmt)
        await self.db.commit()



# services/staff_service.py

from datetime import date
from sqlalchemy.ext.asyncio import AsyncSession
from repositories.staff_repository import StaffRepository

class StaffService:
    def __init__(self, db: AsyncSession):
        self.repo = StaffRepository(db)

    async def soft_delete_staff(self, uuid: str, last_date: date):
        # You could add additional business logic here
        await self.repo.soft_delete_staff(uuid, last_date)
        return {"uuid": uuid, "is_active": False, "is_deleted": True, "last_date": last_date}



# routers/staff_router.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from schemas.staff import StaffDeleteRequest, StaffResponse
from services.staff_service import StaffService
from database import get_db  # Assuming you have a DB dependency

router = APIRouter(prefix="/staff", tags=["Staff"])

@router.put("/delete", response_model=StaffResponse)
async def delete_staff(
    request: StaffDeleteRequest,
    db: AsyncSession = Depends(get_db),
):
    service = StaffService(db)
    try:
        result = await service.soft_delete_staff(request.uuid, request.last_date)
        return result
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Error deleting staff record: {e}",
        )
